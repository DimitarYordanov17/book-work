<class>
	<keyword> class </keyword>
	<identifier> List </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> data </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<identifier> List </identifier>
		<identifier> next </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> List </identifier>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> car </identifier>
			<symbol> , </symbol>
			<identifier> List </identifier>
			<identifier> cdr </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> data </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> car </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> next </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> cdr </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getData </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> data </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getNext </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> next </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> print </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<varDec>
				<keyword> var </keyword>
				<identifier> List </identifier>
				<identifier> current </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> current </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> current </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<keyword> null </keyword>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							<symbol> . </symbol>
							<identifier> printInt </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> current </identifier>
										<symbol> . </symbol>
										<identifier> getData </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							<symbol> . </symbol>
							<identifier> printChar </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 32 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> current </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> current </identifier>
									<symbol> . </symbol>
									<identifier> getNext </identifier>
									<symbol> ( </symbol>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> next </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<keyword> null </keyword>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<doStatement>
							<keyword> do </keyword>
							<identifier> next </identifier>
							<symbol> . </symbol>
							<identifier> dispose </identifier>
							<symbol> ( </symbol>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
