<class>
	<keyword> class </keyword>
	<identifier> BubbleSort </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> var </keyword>
		<keyword> int </keyword>
		<identifier> a </identifier>
		<symbol> , </symbol>
		<identifier> b </identifier>
		<symbol> , </symbol>
		<identifier> c </identifier>
		<symbol> , </symbol>
		<identifier> d </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> var </keyword>
		<identifier> bool </identifier>
		<identifier> test </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> sort </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<identifier> Array </identifier>
			<identifier> array </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> length </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> main_counter </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> length </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> length </identifier>
						</term>
						<symbol> - </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> double_length </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> length </identifier>
						</term>
						<symbol> * </symbol>
						<term>
							<identifier> length </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> main_counter </identifier>
						</term>
						<symbol> < </symbol>
						<term>
							<identifier> double_length </identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> counter </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<integerConstant> 0 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> counter </identifier>
								</term>
								<symbol> < </symbol>
								<term>
									<identifier> length </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> first_variable </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> array </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> counter </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> second_variable </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> array </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> counter </identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> first_variable </identifier>
										</term>
										<symbol> > </symbol>
										<term>
											<identifier> second_variable </identifier>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<letStatement>
											<keyword> let </keyword>
											<identifier> array </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> counter </identifier>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> second_variable </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> array </identifier>
											<symbol> [ </symbol>
											<expression>
												<term>
													<identifier> counter </identifier>
												</term>
												<symbol> + </symbol>
												<term>
													<integerConstant> 1 </integerConstant>
												</term>
											</expression>
											<symbol> ] </symbol>
											<symbol> = </symbol>
											<expression>
												<term>
													<identifier> first_variable </identifier>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
								<letStatement>
									<keyword> let </keyword>
									<identifier> counter </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> counter </identifier>
										</term>
										<symbol> + </symbol>
										<term>
											<integerConstant> 1 </integerConstant>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> main_counter </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> main_counter </identifier>
								</term>
								<symbol> + </symbol>
								<term>
									<integerConstant> 1 </integerConstant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
