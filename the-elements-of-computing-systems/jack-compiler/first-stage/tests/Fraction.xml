<class>
	<keyword> class </keyword>
	<identifier> Fraction </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> numerator </identifier>
		<symbol> , </symbol>
		<identifier> denominator </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<identifier> Fraction </identifier>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> x </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> y </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> numerator </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> x </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> denominator </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> y </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> reduce </identifier>
					<symbol> ( </symbol>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<keyword> this </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> reduce </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> g </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> g </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Fraction </identifier>
							<symbol> . </symbol>
							<identifier> gcd </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> numerator </identifier>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<identifier> denominator </identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> g </identifier>
						</term>
						<symbol> > </symbol>
						<term>
							<integerConstant> 1 </integerConstant>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> numerator </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> numerator </identifier>
								</term>
								<symbol> / </symbol>
								<term>
									<identifier> g </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> denominator </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> denominator </identifier>
								</term>
								<symbol> / </symbol>
								<term>
									<identifier> g </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getNumerator </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> numerator </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> getDenominator </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> denominator </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<identifier> Fraction </identifier>
		<identifier> plus </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<identifier> Fraction </identifier>
			<identifier> other </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> sum </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> sum </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> numerator </identifier>
								</term>
								<symbol> * </symbol>
								<term>
									<identifier> other </identifier>
									<symbol> . </symbol>
									<identifier> getDenominator </identifier>
									<symbol> ( </symbol>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
						<symbol> + </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> other </identifier>
									<symbol> . </symbol>
									<identifier> getNumerator </identifier>
									<symbol> ( </symbol>
									<symbol> ) </symbol>
								</term>
								<symbol> * </symbol>
								<term>
									<identifier> denominator </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> Fraction </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> sum </identifier>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<identifier> denominator </identifier>
									</term>
									<symbol> * </symbol>
									<term>
										<identifier> other </identifier>
										<symbol> . </symbol>
										<identifier> getDenominator </identifier>
										<symbol> ( </symbol>
										<symbol> ) </symbol>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Memory </identifier>
					<symbol> . </symbol>
					<identifier> deAlloc </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<keyword> this </keyword>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> print </identifier>
		<symbol> ( </symbol>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<statements>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> numerator </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printString </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> " </identifier>
							</term>
							<symbol> / </symbol>
							<term>
								<identifier> " </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> denominator </identifier>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> int </keyword>
		<identifier> gcd </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> a </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> b </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<symbol> { </symbol>
		<subroutineBody>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> r </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<symbol> ~ </symbol>
							<term>
								<symbol> ( </symbol>
								<expression>
									<term>
										<identifier> b </identifier>
									</term>
									<symbol> = </symbol>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
								<symbol> ) </symbol>
							</term>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> r </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> a </identifier>
								</term>
								<symbol> - </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> b </identifier>
										</term>
										<symbol> * </symbol>
										<term>
											<symbol> ( </symbol>
											<expression>
												<term>
													<identifier> a </identifier>
												</term>
												<symbol> / </symbol>
												<term>
													<identifier> b </identifier>
												</term>
											</expression>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> b </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> b </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> r </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<ReturnStatement>
					<keyword> return </keyword>
					<expression>
						<term>
							<identifier> a </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</ReturnStatement>
				<symbol> } </symbol>
			</statements>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
