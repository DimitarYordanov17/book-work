// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* Decode arrays to single outputs, because the language won't let me subindex internal nodes :( */
    Decode6(values=C, a=c6, b=c5, c=c4, d=c3, e=c2, f=c1);
    Decode3(values=J, a=j3, b=j2, c=j1);
    Decode3(values=D, a=d3, b=d2, c=d1);


    /* Get constant 0xFFFF, 0x0001, 0x0000 */
    DoNothing16(in[0..15]=true, out=constantMax);
    Or16To1(in=constantMax, out=constantOne);
    Not16(in=constantMax, out=constantZero);

    /* Choose if and what we should load into A */
    Mux16(a=instruction, b=aluOutput, sel=T, out=loadAInput);
    Not(in=T, out=notT);
    Or(a=d1, b=notT, out=loadA);
    ARegister(in=loadAInput, load=loadA, out=ARegister);
    
    
    /* Choose if adn what we shoud load into D */
    And(a=d2, b=T, out=ifLoadD);
    DRegister(in=aluOutput, load=ifLoadD, out=DRegister);

    /* Initialize program counter */
    PC(in=pcTake, load=constantOne, out=pcOut);

    /* Decode Instruction */
    DecodeInstruction(instruction=instruction, A=A, C=C, D=D, J=J, T=T);

    /* Choose 'y' ALU parameter */
    Mux16(a=ARegister, b=inM, sel=A, out=yParameter);

    /* Compute ALU output */
    ALU(x=DRegister, y=yParameter, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=aluOutput, zr=zr, ng=ng);

    /* Check branching */
    BCU(J=J, zr=zr, ng=ng, out=branchCondition);

    And(a=T, b=branchCondition, out=takeBranch);

    /* Increment program counter */
    Add16(a=pcOut, b[0]=true, b[1..15]=false, out=incrementedPc);

    /* Choose if branch or incremented PC */
    Mux16(a=incrementedPc, b=ARegister, sel=takeBranch, out=nextPc);

    /* Choose if reset or branch/incremented */
    Mux16(a=nextPc, b=constantZero, sel=reset, out=pcTake);

    /* Set output */
    DoNothing16(in=aluOutput, out=outM);
    
    RMBIT(in=ARegister, out=addressM);
    RMBIT(in=pcOut, out=pc);

    And(a=T, b=d3, out=writeM);
}
