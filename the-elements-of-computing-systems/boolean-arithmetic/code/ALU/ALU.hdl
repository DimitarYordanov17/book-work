// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /* Had to implement several simpler chips for this to work
     * One of them is to check if the numbers is negative by
     * yielding most significant bit and the second one is to just
     * do nothing :) The reason for this is that I cannot directly 
     * wire the output of this chip to another chip and I cannot
     * directly subindex intermediate pins.
     */


    // 1. Zero the x input, when zx is 1:
    Mux16(a=x, b[0..15]=false, sel=zx, out=changedx);
    
    // 2. Negate the x input, when nx is 1:
    Not16(in=changedx, out=notx);
    Mux16(a=changedx, b=notx, sel=nx, out=secondchangedx);

    // 3. Zero the y input, when zy is 1:
    Mux16(a=y, b[0..15]=false, sel=zy, out=changedy);

    // 4. Negate the y input, when ny is 1:
    Not16(in=changedy, out=noty);
    Mux16(a=changedy, b=noty, sel=ny, out=secondchangedy);

    // 5. ADD if f is 1, AND if f is 0:
    Add16(a=secondchangedx, b=secondchangedy, out=xysum);
    And16(a=secondchangedx, b=secondchangedy, out=xyand);

    Mux16(a=xyand, b=xysum, sel=f, out=xyfstep);

    // 6. Negate the output, if no is 1:
    Not16(in=xyfstep, out=negatedxyf);
    Mux16(a=xyfstep, b=negatedxyf, sel=no, out=tempout);
   

    // 7. Set zr to 1 if output is 0:
    Or16Way(in=tempout, out=everythingzero);
    Not(in=everythingzero, out=zr);


    // 8. Set ng to 1 if output is < 0:
    CheckSignificant(in=tempout, out=ng);
    DoNothing16(in=tempout, out=out);
}
